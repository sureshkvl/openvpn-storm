// Generated by CoffeeScript 1.8.0
(function() {
  var ClientSchema, Context, OpenvpnClientService, OpenvpnServerService, OpenvpnService, ServerSchema, StormService, exec, fs, merge, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormService = require('stormservice');

  merge = require('fmerge');

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  ServerSchema = require('./schema').server;

  ClientSchema = require('./schema').client;

  OpenvpnService = (function(_super) {
    __extends(OpenvpnService, _super);

    OpenvpnService.prototype.invocation = {
      name: 'openvpn',
      path: '/usr/sbin',
      monitor: true,
      args: [],
      options: {
        detached: true,
        stdio: ["ignore", -1, -1]
      }
    };

    function OpenvpnService(id, data, opts) {
      if (data.instance != null) {
        this.instance = data.instance;
        delete data.instance;
      }
      if (opts == null) {
        opts = {};
      }
      if (opts.configPath == null) {
        opts.configPath = "/var/stormflash/plugins/openvpn";
      }
      if (opts.logPath == null) {
        opts.logPath = "/var/log/openvpn";
      }
      OpenvpnService.__super__.constructor.call(this, id, data, opts);
      this.configs = {
        service: {
          filename: "" + this.configPath + "/" + this.id + ".conf"
        }
      };
      this.invocation = merge(this.invocation, {
        args: ["--config", "" + this.configs.service.filename],
        options: {
          stdio: ["ignore", this.out, this.err]
        }
      });
      this.configs.service.generator = (function(_this) {
        return function(callback) {
          var cert, dir, filename, i, key, val, vpnconfig, _i, _j, _len, _len1, _ref, _ref1;
          vpnconfig = '';
          dir = "" + _this.configPath + "/" + _this.id;
          if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
          }
          _ref = _this.data.certificates;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cert = _ref[_i];
            filename = (function() {
              switch (cert.name) {
                case "ca":
                  return this.data.ca;
                case "dh":
                  return this.data.dh;
                case "cert":
                  return this.data.cert;
                case "key":
                  return this.data.key;
                case "secret":
                  return this.data.secret;
              }
            }).call(_this);
            path = "" + dir + "/" + filename;
            console.log("path");
            fs.writeFileSync(path, new Buffer(cert.data || '', "base64"));
          }
          _ref1 = _this.data;
          for (key in _ref1) {
            val = _ref1[key];
            switch (typeof val) {
              case "object":
                if (val instanceof Array) {
                  for (_j = 0, _len1 = val.length; _j < _len1; _j++) {
                    i = val[_j];
                    if (key === "route") {
                      vpnconfig += "" + key + " " + i + "\n";
                    }
                    if (key === "push") {
                      vpnconfig += "" + key + " \"" + i + "\"\n";
                    }
                  }
                }
                break;
              case "number":
              case "string":
                if (key === 'ca' || key === 'dh' || key === 'cert' || key === 'key' || key === 'secret') {
                  vpnconfig += key + ' ' + ("" + dir + "/" + val) + "\n";
                } else {
                  vpnconfig += key + ' ' + val + "\n";
                }
                break;
              case "boolean":
                vpnconfig += key + "\n";
            }
          }
          return callback(vpnconfig);
        };
      })(this);
    }

    OpenvpnService.prototype.updateService = function(newdata, callback) {
      var ccdpath, err;
      this.data = merge(this.data, newdata);
      ccdpath = newdata["client-config-dir"];
      if (ccdpath != null) {
        try {
          fs.mkdir("" + ccdpath, function() {});
        } catch (_error) {
          err = _error;
        }
      }
      return this.generate(callback);
    };

    OpenvpnService.prototype.destructor = function() {
      this.eliminate();
      return this.emit('destroy');
    };

    return OpenvpnService;

  })(StormService);

  OpenvpnServerService = (function(_super) {
    __extends(OpenvpnServerService, _super);

    function OpenvpnServerService(id, data, opts) {
      var ccdpath, err;
      this.schema = ServerSchema;
      ccdpath = data["client-config-dir"];
      if (ccdpath != null) {
        try {
          fs.mkdir("" + ccdpath, function() {});
        } catch (_error) {
          err = _error;
        }
      }
      OpenvpnServerService.__super__.constructor.call(this, id, data, opts);
    }

    return OpenvpnServerService;

  })(OpenvpnService);

  OpenvpnClientService = (function(_super) {
    __extends(OpenvpnClientService, _super);

    function OpenvpnClientService(id, data, opts) {
      this.schema = ClientSchema;
      OpenvpnClientService.__super__.constructor.call(this, id, data, opts);
    }

    return OpenvpnClientService;

  })(OpenvpnService);

  module.exports.OpenvpnService = OpenvpnService;

  module.exports.OpenvpnClient = OpenvpnClientService;

  module.exports.OpenvpnServer = OpenvpnServerService;

  Context = require('./context');

  module.exports.Context = Context;

}).call(this);
