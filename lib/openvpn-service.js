// Generated by CoffeeScript 1.7.1
(function() {
  var OpenvpnClientService, OpenvpnServerService, OpenvpnService, StormService, extend, fs, merge,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormService = require('stormservice');

  merge = require('fmerge');

  fs = require('fs');

  extend = require('util')._extend;

  OpenvpnService = (function(_super) {
    __extends(OpenvpnService, _super);

    OpenvpnService.prototype.invocation = {
      name: 'openvpn',
      path: '/usr/sbin',
      monitor: true,
      args: [],
      options: {
        detached: true,
        stdio: ["ignore", -1, -1]
      }
    };

    function OpenvpnService(id, data, opts, schemaObj) {
      var schema;
      schema = extend({}, schemaObj);
      if (data.instance != null) {
        this.instance = data.instance;
        delete data.instance;
      }
      if (opts == null) {
        opts = {};
      }
      if (opts.configPath == null) {
        opts.configPath = "/var/stormflash/plugins/openvpn";
      }
      if (opts.logPath == null) {
        opts.logPath = "/var/log/openvpn";
      }
      OpenvpnService.__super__.constructor.call(this, id, data, opts);
      this.configs = {
        service: {
          filename: "" + this.configPath + "/" + this.id + ".conf"
        }
      };
      this.invocation = merge(this.invocation, {
        args: ["--config", "" + this.configs.service.filename],
        options: {
          stdio: ["ignore", this.out, this.err]
        }
      });
      this.configs.service.generator = (function(_this) {
        return function(callback) {
          var i, key, val, vpnconfig, _i, _len, _ref;
          vpnconfig = '';
          _ref = _this.data;
          for (key in _ref) {
            val = _ref[key];
            switch (typeof val) {
              case "object":
                if (val instanceof Array) {
                  for (_i = 0, _len = val.length; _i < _len; _i++) {
                    i = val[_i];
                    if (key === "route") {
                      vpnconfig += "" + key + " " + i + "\n";
                    }
                    if (key === "push") {
                      vpnconfig += "" + key + " \"" + i + "\"\n";
                    }
                  }
                }
                break;
              case "number":
              case "string":
                vpnconfig += key + ' ' + val + "\n";
                break;
              case "boolean":
                vpnconfig += key + "\n";
            }
          }
          return callback(vpnconfig);
        };
      })(this);
    }

    OpenvpnService.prototype.destructor = function() {
      this.eliminate();
      return this.emit('destroy');
    };

    return OpenvpnService;

  })(StormService);

  OpenvpnServerService = (function(_super) {
    __extends(OpenvpnServerService, _super);

    function OpenvpnServerService(id, data, opts) {
      var ccdpath, err, serverSchema;
      serverSchema = {
        name: "openvpn",
        type: "object",
        additionalProperties: true,
        properties: {
          id: {
            "type": "string",
            "required": false
          },
          port: {
            "type": "number",
            "required": true
          },
          dev: {
            "type": "string",
            "required": true
          },
          proto: {
            "type": "string",
            "required": true
          },
          ca: {
            "type": "string",
            "required": true
          },
          dh: {
            "type": "string",
            "required": true
          },
          cert: {
            "type": "string",
            "required": true
          },
          key: {
            "type": "string",
            "required": true
          },
          server: {
            "type": "string",
            "required": true
          },
          'ifconfig-pool-persist': {
            "type": "string",
            "required": false
          },
          'script-security': {
            "type": "string",
            "required": false
          },
          multihome: {
            "type": "boolean",
            "required": false
          },
          management: {
            "type": "string",
            "required": false
          },
          cipher: {
            "type": "string",
            "required": false
          },
          'tls-cipher': {
            "type": "string",
            "required": false
          },
          auth: {
            "type": "string",
            "required": false
          },
          topology: {
            "type": "string",
            "required": false
          },
          'route-gateway': {
            "type": "string",
            "required": false
          },
          'client-config-dir': {
            "type": "string",
            "required": false
          },
          'ccd-exclusive': {
            "type": "boolean",
            "required": false
          },
          'client-to-client': {
            "type": "boolean",
            "required": false
          },
          route: {
            items: {
              type: "string"
            }
          },
          push: {
            items: {
              type: "string"
            }
          },
          'tls-timeout': {
            "type": "number",
            "required": false
          },
          'max-clients': {
            "type": "number",
            "required": false
          },
          'persist-key': {
            "type": "boolean",
            "required": false
          },
          'persist-tun': {
            "type": "boolean",
            "required": false
          },
          status: {
            "type": "string",
            "required": false
          },
          keepalive: {
            "type": "string",
            "required": false
          },
          'comp-lzo': {
            "type": "string",
            "required": false
          },
          sndbuf: {
            "type": "number",
            "required": false
          },
          rcvbuf: {
            "type": "number",
            "required": false
          },
          txqueuelen: {
            "type": "number",
            "required": false
          },
          'replay-window': {
            "type": "string",
            "required": false
          },
          'duplicate-cn': {
            "type": "boolean",
            "required": false
          },
          'log-append': {
            "type": "string",
            "required": false
          },
          verb: {
            "type": "number",
            "required": false
          },
          mlock: {
            "type": "boolean",
            "required": false
          }
        }
      };
      ccdpath = data["client-config-dir"];
      if (ccdpath != null) {
        try {
          fs.mkdir("" + ccdpath, function() {});
        } catch (_error) {
          err = _error;
        }
      }
      OpenvpnServerService.__super__.constructor.call(this, id, data, opts, serverSchema);
    }

    return OpenvpnServerService;

  })(OpenvpnService);

  OpenvpnClientService = (function(_super) {
    __extends(OpenvpnClientService, _super);

    function OpenvpnClientService(id, data, opts) {
      var clientSchema;
      clientSchema = {
        name: "openvpn",
        type: "object",
        additionalProperties: true,
        properties: {
          id: {
            "type": "string",
            "required": false
          },
          pull: {
            "type": "boolean",
            "required": true
          },
          'tls-client': {
            "type": "boolean",
            "required": true
          },
          dev: {
            "type": "string",
            "required": true
          },
          proto: {
            "type": "string",
            "required": false
          },
          ca: {
            "type": "string",
            "required": true
          },
          dh: {
            "type": "string",
            "required": false
          },
          cert: {
            "type": "string",
            "required": true
          },
          key: {
            "type": "string",
            "required": true
          },
          remote: {
            "type": "string",
            "required": true
          },
          cipher: {
            "type": "string",
            "required": false
          },
          'tls-cipher': {
            "type": "string",
            "required": false
          },
          'remote-random': {
            "type": "boolean",
            "required": false
          },
          'resolv-retry': {
            "type": "string",
            "required": false
          },
          ping: {
            "type": "number",
            "required": false
          },
          'ping-restart': {
            "type": "number",
            "required": false
          },
          log: {
            "type": "string",
            "required": false
          },
          route: {
            items: {
              type: "string"
            }
          },
          push: {
            items: {
              type: "string"
            }
          },
          'persist-key': {
            "type": "boolean",
            "required": false
          },
          'persist-tun': {
            "type": "boolean",
            "required": false
          },
          status: {
            "type": "string",
            "required": false
          },
          'comp-lzo': {
            "type": "string",
            "required": false
          },
          verb: {
            "type": "number",
            "required": false
          },
          mlock: {
            "type": "boolean",
            "required": false
          }
        }
      };
      OpenvpnClientService.__super__.constructor.call(this, id, data, opts, clientSchema);
    }

    return OpenvpnClientService;

  })(OpenvpnService);

  module.exports.OpenvpnService = OpenvpnService;

  module.exports.OpenvpnClient = OpenvpnClientService;

  module.exports.OpenvpnServer = OpenvpnServerService;

}).call(this);
