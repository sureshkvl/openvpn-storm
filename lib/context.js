// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, Start, Stop, Update, Valid, Validate, Validator, assert, async, delUser, getPromise, needle, postUser, putServer, schema, schema_client, schema_server, schema_user,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Valid = require('jsonschema').Validator;

  Validator = new Valid;

  assert = require('assert');

  Promise = require('bluebird');

  async = require('async');

  needle = Promise.promisifyAll(require('needle'));

  schema_user = require('./schema').user;

  schema_server = require('./schema').server;

  schema_client = require('./schema').client;

  schema = {
    "server": schema_server,
    "client": schema_client,
    "user": schema_server
  };

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  delUser = function(URL, id, user) {
    return getPromise().then((function(_this) {
      return function(resp) {
        console.log("del url  : /openvpn/server/" + id + "/users/" + user.cname);
        return needle.deleteAsync(URL + ("/openvpn/server/" + id + "/users/" + user.cname), user, {
          json: true
        }).then(function(resp) {
          if (resp[0].statusCode !== 200) {
            throw new Error('invalidStatusCode');
          }
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this));
  };

  postUser = function(URL, id, user) {
    return getPromise().then((function(_this) {
      return function(resp) {
        console.log("post url  : /openvpn/server/" + id + "/users");
        return needle.postAsync(URL + ("/openvpn/server/" + id + "/users"), user, {
          json: true
        }).then(function(resp) {
          if (resp[0].statusCode !== 200) {
            throw new Error('invalidStatusCode');
          }
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this));
  };

  putServer = function(URL, instance) {
    return getPromise().then((function(_this) {
      return function(resp) {
        console.log("put url  : /openvpn/" + instance.name + "/" + instance.id);
        console.log("conf", instance.conf);
        return needle.putAsync(URL + ("/openvpn/" + instance.name + "/" + instance.id), instance.conf, {
          json: true
        }).then(function(resp) {
          if (resp[0].statusCode !== 200) {
            throw new Error('invalidStatusCode');
          }
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this));
  };

  Validate = function(config) {
    var conf, name, options, policyConfig, ref, ref1, ref2, ref3, ref4, res, results;
    policyConfig = {};
    if (((ref = config.server) != null ? ref.enable : void 0) && ((ref1 = config.server) != null ? ref1.coreConfig : void 0)) {
      policyConfig.server = config.server.coreConfig;
    }
    if (((ref2 = config.client) != null ? ref2.enable : void 0) && ((ref3 = config.client) != null ? ref3.coreConfig : void 0)) {
      policyConfig.client = config.server.coreConfig;
    }
    results = [];
    for (name in policyConfig) {
      conf = policyConfig[name];
      options = {};
      options.propertyName = name;
      res = Validator.validate(conf, schema[name], options);
      if ((ref4 = res.errors) != null ? ref4.length : void 0) {
        throw new Error("openvpn.Validate ", res);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Start = function(context) {
    var config, configObj, configs, ref, ref1, ref2, ref3, ref4, ref5;
    if (!(context.bInstalledPackages && context.service.name)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    if (((ref = context.instances) != null ? ref.length : void 0) === 2) {
      return context;
    }
    if (context.instances == null) {
      context.instances = [];
    }
    configObj = (ref1 = context.service.factoryConfig) != null ? ref1.config : void 0;
    console.log("configObj ", configObj);
    console.log("context.servicce.name ", context.service.name);
    config = configObj[context.service.name];
    console.log("config  ", config);
    configs = [];
    if (((ref2 = config.server) != null ? ref2.enable : void 0) && ((ref3 = config.server) != null ? ref3.coreConfig : void 0)) {
      configs.push({
        name: 'server',
        config: config.server.coreConfig
      });
    }
    if (((ref4 = config.client) != null ? ref4.enable : void 0) && ((ref5 = config.client) != null ? ref5.coreConfig : void 0)) {
      configs.push({
        name: 'client',
        config: config.client.coreConfig
      });
    }
    return getPromise().then((function(_this) {
      return function(resp) {
        return Promise.map(configs, function(config) {
          return needle.postAsync(context.baseUrl + ("/openvpn/" + config.name), config.config, {
            json: true
          }).then((function(_this) {
            return function(resp) {
              if (resp[0].statusCode !== 200) {
                throw new Error('invalidStatusCode');
              }
              return {
                name: config.name,
                id: resp[1].id
              };
            };
          })(this))["catch"]((function(_this) {
            return function(err) {
              throw err;
            };
          })(this));
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        var i, inst, instance, j, len, len1, ref6, res;
        for (i = 0, len = resp.length; i < len; i++) {
          res = resp[i];
          if (res) {
            inst = null;
            ref6 = context.instances;
            for (j = 0, len1 = ref6.length; j < len1; j++) {
              instance = ref6[j];
              if (instance[res.name]) {
                inst = instance;
              }
            }
            if (inst) {
              inst[res.name] = res.id;
            } else {
              context.instances.push(res);
            }
          }
        }
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    var instances;
    instances = context != null ? context.instances : void 0;
    return getPromise().then(function(resp) {
      return Promise.map(instances, (function(_this) {
        return function(instance) {
          return needle.deleteAsync(context.baseUrl + ("/openvpn/" + instance.name + "/" + instance.id), null).then(function(resp) {
            if (resp[0].statusCode !== 204) {
              throw new Error({
                name: 'invalidStatusCode',
                value: resp[0].statusCode
              });
            }
            return 'done';
          })["catch"](function(err) {
            throw err;
          });
        };
      })(this));
    })["catch"]((function(_this) {
      return function(error) {
        throw error;
      };
    })(this));
  };

  Update = function(context) {
    var ExistingUsers, config, i, instance, j, k, len, len1, len2, policyConfig, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, user;
    if (!(context.instances && context.service.policyConfig)) {
      throw new Error({
        name: 'openvpn-storm.Update missingParams'
      });
    }
    policyConfig = {};
    policyConfig.server = {};
    config = context.service.policyConfig[context.service.name];
    console.log("config is ", config);
    if (((ref = config.server) != null ? ref.enable : void 0) && ((ref1 = config.server) != null ? ref1.coreConfig : void 0)) {
      policyConfig.server.config = config.server.coreConfig;
    }
    if (((ref2 = config.server) != null ? ref2.enable : void 0) && ((ref3 = config.server) != null ? ref3.users : void 0)) {
      policyConfig.server.users = config.server.users;
    }
    ref4 = context.instances;
    for (i = 0, len = ref4.length; i < len; i++) {
      instance = ref4[i];
      instance.conf = policyConfig[instance.name].config;
      instance.users = policyConfig[instance.name].users;
      if ((instance.conf != null) && instance.conf !== null) {
        putServer(context.baseUrl, instance);
      }
    }
    if (((ref5 = context.history) != null ? (ref6 = ref5.server) != null ? ref6.users : void 0 : void 0) != null) {
      ExistingUsers = context.history.server.users;
    } else {
      context.history = {};
      context.history.server = {};
      context.history.server.users = [];
      ExistingUsers = context.history.server.users;
    }
    console.log("ExistingUsers", ExistingUsers);
    console.log(context.instances[0].users);
    ref7 = context.instances[0].users;
    for (j = 0, len1 = ref7.length; j < len1; j++) {
      user = ref7[j];
      if (indexOf.call(ExistingUsers, user) < 0) {
        console.log("User POST ", user);
        postUser(context.baseUrl, context.instances[0].id, user);
        ExistingUsers.push(user);
      }
    }
    for (k = 0, len2 = ExistingUsers.length; k < len2; k++) {
      user = ExistingUsers[k];
      if (indexOf.call(context.instances[0].users, user) < 0) {
        delUser(context.baseUrl, context.instances[0].id, user);
        ExistingUsers.pop(user);
      }
    }
    console.log("ExistingUsers final");
    console.log(ExistingUsers);
    console.log(context.history.server.users);
    return console.log(context);
  };

  module.exports.start = Start;

  module.exports.stop = Stop;

  module.exports.update = Update;

  module.exports.validate = Validate;

}).call(this);
