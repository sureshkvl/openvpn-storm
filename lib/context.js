// Generated by CoffeeScript 1.9.3
(function() {
  var DeleteClient, DeleteServer, DeleteUser, PostClient, PostServer, PostUser, Promise, PutClient, PutServer, Start, Stop, Update, UpdateClient, UpdateServer, UserExists, Valid, Validator, assert, async, diff, getPromise, needle, schema, schema_client, schema_server, schema_user, utils;

  Valid = require('jsonschema').Validator;

  Validator = new Valid;

  assert = require('assert');

  Promise = require('bluebird');

  async = require('async');

  needle = Promise.promisifyAll(require('needle'));

  utils = require('utils')._;

  diff = require('deep-diff').diff;

  schema_user = require('./schema').user;

  schema_server = require('./schema').server;

  schema_client = require('./schema').client;

  schema = {
    "server": schema_server,
    "client": schema_client,
    "user": schema_server
  };

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  PostServer = function(baseUrl, server) {
    return needle.postAsync(baseUrl + "/openvpn/server", server.config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        server.instance = resp[1].id;
        if (server.history == null) {
          server.history = {};
        }
        server.history.config = utils.extend({}, server.config);
        server.history.users = [];
        return server;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  PostClient = function(baseUrl, client) {
    return needle.postAsync(baseUrl + "/openvpn/client", client.config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        client.instance = resp[1].id;
        if (client.history == null) {
          client.history = {};
        }
        client.history.config = utils.extend({}, client.config);
        return client;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  DeleteServer = function(baseUrl, server) {
    return needle.deleteAsync(baseUrl + ("/openvpn/server/" + server.instance), {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 204) {
          throw new Error('invalidStatusCode');
        }
        server = null;
        return server;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  DeleteClient = function(baseUrl, client) {
    return needle.deleteAsync(baseUrl + ("/openvpn/client/" + client.instance), {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 204) {
          throw new Error('invalidStatusCode');
        }
        client = null;
        return client;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  PutServer = function(baseUrl, server) {
    return needle.putAsync(baseUrl + ("/openvpn/server/" + server.instance), server.config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        server.history.config = utils.extend({}, server.config);
        return server;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  PutClient = function(baseUrl, client) {
    return needle.putAsync(baseUrl + ("/openvpn/client/" + client.instance), client.config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        console.log("respo code", resp[0].statusCode);
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        client.history.config = utils.extend({}, client.config);
        return client;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  PostUser = function(baseUrl, serverid, user) {
    return needle.postAsync(baseUrl + ("/openvpn/server/" + serverid + "/users"), user, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return resp.body;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  DeleteUser = function(baseUrl, serverid, user) {
    return needle.deleteAsync(baseUrl + ("/openvpn/server/" + serverid + "/users/" + user.cname), {
      json: true
    }).then((function(_this) {
      return function(resp) {
        console.log("response code is", resp[0].statusCode);
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return resp.body;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Start = function(context) {
    var clients, ref, ref1, servers;
    if (!(context.bInstalledPackages && context.service.name)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    if (utils.isEmpty(context.service.servers) && utils.isEmpty(context.service.clients)) {
      throw new Error("openvpn-storm.Start missing server,client info");
    }
    servers = (ref = context.service.servers) != null ? ref : [];
    clients = (ref1 = context.service.clients) != null ? ref1 : [];
    return getPromise().then((function(_this) {
      return function(resp) {
        return Promise.map(servers, function(server) {
          return PostServer(context.baseUrl, server);
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return Promise.map(clients, function(client) {
          return PostClient(context.baseUrl, client);
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    var clients, ref, ref1, servers;
    if (utils.isEmpty(context.service.servers) && utils.isEmpty(context.service.clients)) {
      throw new Error("openvpn-storm.Start missing server,client info");
    }
    servers = (ref = context.service.servers) != null ? ref : [];
    clients = (ref1 = context.service.clients) != null ? ref1 : [];
    return getPromise().then((function(_this) {
      return function(resp) {
        return Promise.map(servers, function(server) {
          return DeleteServer(context.baseUrl, server);
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return Promise.map(clients, function(client) {
          return DeleteClient(context.baseUrl, client);
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  UserExists = function(list, id) {
    var i, item, len;
    for (i = 0, len = list.length; i < len; i++) {
      item = list[i];
      if (item.id === id) {
        return true;
      }
    }
    return false;
  };


  /*
      #logic
      step1. iterate the servers array. 
         a. if instance is not preset  - assume this is  a new server.  
             - post the server and update the instance id, and save the config in history
         b.if instance is present, (assume this is the existing running server) 
              i) diff with config and history config 
                  if diff is found, then server config is changed,
                  put the server config 
  
              ii) check the current users aray and history users array              
                  - if current user is not present in the history users 
                        then this is the new user , POST the new user and update it in the history users
                  - if history user is not present in the current users , 
                         then this uses to be deleted. DELETE this user
      step2: iterate the clients array
         a. if instance is not present - assume that is the new client . 
             - post the client and update the instance id, and save the config in the history
         b. if the instance is present (assume this is the existing running client)
              i) diff with config and history config 
                  if diff is found, then client config is changed,
                  put the client config
   */

  UpdateClient = function(baseUrl, client) {
    return getPromise().then((function(_this) {
      return function(resp) {
        var differences;
        if (client.instance == null) {
          return PostClient(baseUrl, client);
        }
        differences = diff(client.config, client.history.config);
        if (!(utils.isEmpty(differences) || (differences == null))) {
          return PutClient(baseUrl, client);
        }
        return client;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  UpdateServer = function(baseUrl, server) {
    return getPromise().then((function(_this) {
      return function(resp) {
        var differences;
        if (server.instance == null) {
          return PostServer(baseUrl, server);
        }
        differences = diff(server.config, server.history.config);
        if (!(utils.isEmpty(differences) || (differences == null))) {
          return PutServer(baseUrl, server);
        }
        return server;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Update = function(context) {
    var clients, ref, ref1, servers;
    if (!(context.bInstalledPackages && context.service.name)) {
      throw new Error('openvpn-storm.Start missingParams');
    }
    if (utils.isEmpty(context.service.servers) && utils.isEmpty(context.service.clients)) {
      throw new Error("openvpn-storm.Start missing server,client info");
    }
    servers = (ref = context.service.servers) != null ? ref : [];
    clients = (ref1 = context.service.clients) != null ? ref1 : [];
    return getPromise().then((function(_this) {
      return function(resp) {
        return Promise.map(clients, function(client) {
          return UpdateClient(context.baseUrl, client);
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return Promise.map(servers, function(server) {
          return UpdateServer(context.baseUrl, server);
        }).then(function(resp) {
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this)).then((function(_this) {
      return function(response) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };


  /*
          Promise.map servers, (server) =>    
              console.log "inside update server map ", server
              unless server.instance?
                  console.log "server instance not present .. hence new server case"
                  return PostServer(context.baseUrl,server)
  
              else if server.instance? and server.config? and server.history.config?
                  console.log "server instance is present .. hence server modification case"
                  #find the difference between  server.config , server.history.config 
                  differences = diff(server.config,server.history.config)     
                  console.log differences               
                  unless utils.isEmpty(differences) or  not differences?
                      console.log "server config difference is found...server put call"
                      return PutServer(context.baseUrl,server)
                          
                      #find the diff between the current users and history users
                      #console.log "server.config.users", server.users
                      #console.log "server.history.users", server.history.users
                  server.users ?= []
                  server.history.users ?= []
                  currentusers = server.users                     
                  historyusers = server.history.users
                  console.log "currentusers", currentusers
                  console.log "historyusers",historyusers                
                      
  
                  for user in currentusers when not utils.isEmpty(currentusers)
                      result =  UserExists(historyusers, user.id)
                      if result is false
                              console.log "this user is a new user- To be posted", user
                              return PostUser user
                      for user in historyusers when not utils.isEmpty(historyusers)
                          result =  UserExists(currentusers, user.id)
                          if result is false
                              console.log "this user is a removed user- To be deleted", user
                              return DeleteUser
              .then (resp)=>
                  console.log "\n\npromise map - servers response are ", resp
                  return resp
              .catch (err)=>
                  throw err
  
          if clients?
              Promise.map clients, (client) =>    
                  console.log "inside update client map ", client
                  unless client.instance?
                      needle.postAsync context.baseUrl + "/openvpn/client", client.config, json:true
                      .then (resp) =>
                          throw new Error 'invalidStatusCode' unless resp[0].statusCode is 200
                          client.instance = resp[1].id
                          client.history ?= {}
                          client.history.config = utils.extend {},client.config                    
                          return client
                      .catch (err) =>
                          throw err        
                  else if client.instance? and client.config? and client.history.config?
                      #find the difference between  server.config , server.history.config 
                      differences = diff(client.config,client.history.config)                    
                      unless utils.isEmpty(differences) or  not differences?
                          return PutClient               
  
  
      .then (resp)=>
          console.log "\n\n\nfinal response", resp
          return context
      .catch (err)=>
          throw err
   */

  module.exports.start = Start;

  module.exports.stop = Stop;

  module.exports.update = Update;

}).call(this);
