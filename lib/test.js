// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, UPDATE, assert, context, delUsers, getPromise, needle, postUsers, putServer, serverins, update;

  assert = require('assert');

  Promise = require('bluebird');

  update = require('./context').update;

  needle = Promise.promisifyAll(require('needle'));

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  postUsers = function(URL, instance) {
    return getPromise().then((function(_this) {
      return function(resp) {
        console.log("post url  : /openvpn/" + instance.name + "/" + instance.id + "/users");
        return Promise.map(instance.addusers, function(user) {
          return needle.postAsync(URL + ("/openvpn/" + instance.name + "/" + instance.id + "/users"), user, {
            json: true
          }).then(function(resp) {
            if (resp[0].statusCode !== 200) {
              throw new Error('invalidStatusCode');
            }
            return resp;
          })["catch"](function(err) {
            throw err;
          });
        });
      };
    })(this));
  };

  putServer = function(URL, instance) {
    return getPromise().then((function(_this) {
      return function(resp) {
        console.log("put url  : /openvpn/" + instance.name + "/" + instance.id);
        return needle.putAsync(URL + ("/openvpn/" + instance.name + "/" + instance.id), instance.conf, {
          json: true
        }).then(function(resp) {
          if (resp[0].statusCode !== 200) {
            throw new Error('invalidStatusCode');
          }
          return resp;
        })["catch"](function(err) {
          throw err;
        });
      };
    })(this));
  };

  delUsers = function(URL, instance) {
    return getPromise().then((function(_this) {
      return function(resp) {
        return Promise.map(instance.delusers, function(user) {
          console.log("del url  : /openvpn/" + instance.name + "/" + instance.id + "/users/" + user.cname);
          return needle.deleteAsync(URL + ("/openvpn/" + instance.name + "/" + instance.id + "/users/" + user.cname), user, {
            json: true
          }).then(function(resp) {
            if (resp[0].statusCode !== 200) {
              throw new Error('invalidStatusCode');
            }
            return resp;
          })["catch"](function(err) {
            throw err;
          });
        });
      };
    })(this));
  };

  UPDATE = function(mycontext) {
    var config, i, instance, len, policyConfig, ref, ref1, ref2, ref3, ref4;
    if (!(mycontext.instances && mycontext.service.policyConfig)) {
      throw new Error({
        name: 'openvpn-storm.Update missingParams'
      });
    }
    policyConfig = {};
    policyConfig.server = {};
    config = mycontext.service.policyConfig[mycontext.service.name];
    if (((ref = config.server) != null ? ref.enable : void 0) && ((ref1 = config.server) != null ? ref1.coreConfig : void 0)) {
      policyConfig.server.config = config.server.coreConfig;
    }
    if (((ref2 = config.server) != null ? ref2.enable : void 0) && ((ref3 = config.server) != null ? ref3.users : void 0)) {
      policyConfig.server.users = config.server.users;
    }
    ref4 = mycontext.instances;
    for (i = 0, len = ref4.length; i < len; i++) {
      instance = ref4[i];
      instance.conf = policyConfig[instance.name].config;
      instance.addusers = policyConfig[instance.name].users;
      instance.delusers = policyConfig[instance.name].users;
    }
    if (instance.delusers != null) {
      return delUsers(mycontext.baseUrl, instance);
    }
  };

  context = {
    baseUrl: "http://localhost:5000",
    bInstalledPackages: true,
    bFactoryPush: false,
    service: {
      name: "openvpn",
      policyConfig: {
        "openvpn": {
          server: {
            enable: true,
            coreConfig: {
              "multihome": true,
              "management": "127.0.0.1 2020"
            },
            users: [
              {
                "email": "grani@clearpathnet.com",
                "cname": "c5C_F8_A1_14_34_5D@device.intercloud.net",
                "push": ["dhcp-option DNS 8.8.8.8", "ip-win32 dynamic", "route-delay 5", "redirect-gateway def1"]
              }, {
                "email": "sureshkumar@calsoftlabs.com",
                "cname": "b5C_F8_A1_14_34_5C@device.intercloud.net",
                "push": ["dhcp-option DNS 8.8.8.8", "ip-win32 dynamic", "route-delay 5", "redirect-gateway def1"]
              }, {
                "email": "test@clearpathnet.com",
                "cname": "a5C_FA_A1_14_34_5D@device.intercloud.net",
                "push": ["dhcp-option DNS 8.8.8.8", "ip-win32 dynamic", "route-delay 5", "redirect-gateway def1"]
              }
            ]
          }
        }
      }
    },
    instances: []
  };

  serverins = [
    {
      name: 'server',
      id: 'fe37d80b-bc55-4c15-bb66-bafcc6ef321a'
    }
  ];

  context.instances = serverins;

  UPDATE(context);

}).call(this);
