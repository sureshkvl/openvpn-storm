// Generated by CoffeeScript 1.7.1
(function() {
  var OpenvpnService, StormData, StormRegistry, UserData, Users, VpnServerRegistry,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  OpenvpnService = require('./openvpn-service');

  VpnServerRegistry = (function(_super) {
    __extends(VpnServerRegistry, _super);

    function VpnServerRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        console.log("restoring " + key + " with:", val);
        entry = new OpenvpnService(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      VpnServerRegistry.__super__.constructor.call(this, filename);
    }

    VpnServerRegistry.prototype.add = function(service) {
      var entry;
      if (!(service instanceof OpenvpnService)) {
        return;
      }
      entry = VpnServerRegistry.__super__.add.call(this, service.id, service);
      return entry.on("running", (function(_this) {
        return function(instance) {
          if (entry.instance !== instance) {
            entry.instance = instance;
            return _this.update(entry);
          }
        };
      })(this));
    };

    VpnServerRegistry.prototype.update = function(service) {
      service.data.instance = service.instance;
      VpnServerRegistry.__super__.update.call(this, service.id, service);
      return delete service.data.instance;
    };

    VpnServerRegistry.prototype.get = function(key) {
      var entry;
      entry = VpnServerRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof OpenvpnService) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    return VpnServerRegistry;

  })(StormRegistry);

  UserData = (function(_super) {
    var userSchema;

    __extends(UserData, _super);

    userSchema = {
      name: "openvpn",
      type: "object",
      additionalProperties: true,
      properties: {
        id: {
          type: "string",
          required: false
        },
        email: {
          type: "string",
          required: false
        },
        cname: {
          type: "string",
          required: false
        },
        ccdPath: {
          type: "string",
          required: false
        },
        push: {
          items: {
            type: "string"
          }
        }
      }
    };

    function UserData(id, data) {
      UserData.__super__.constructor.call(this, id, data, userSchema);
    }

    return UserData;

  })(StormData);

  Users = (function(_super) {
    __extends(Users, _super);

    function Users(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new UserData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(key) {});
      Users.__super__.constructor.call(this, filename);
      this.on('added', function(entry) {
        return this.adduser(entry.data);
      });
    }

    Users.prototype.get = function(key) {
      var entry;
      entry = Users.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof UserData) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    Users.prototype.adduser = function(user) {
      var file, filename, gconfig, i, key, val, _i, _len;
      file = user.cname ? user.cname : user.email;
      filename = user.ccdpath + "/" + ("" + file);
      gconfig = '';
      for (key in user) {
        val = user[key];
        switch (typeof val) {
          case "object":
            if (val instanceof Array) {
              for (_i = 0, _len = val.length; _i < _len; _i++) {
                i = val[_i];
                if (key === "iroute") {
                  gconfig += "" + key + " " + i + "\n";
                }
                if (key === "push") {
                  gconfig += "" + key + " \"" + i + "\"\n";
                }
              }
            }
        }
      }
      console.log("filename for ccd generated is ", filename);
      return fs.writeFileSync(filename, gconfig);
    };

    return Users;

  })(StormRegistry);

  module.exports.VpnServerRegistry = VpnServerRegistry;

  module.exports.VpnUserRegistry = Users;

}).call(this);
