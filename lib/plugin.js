// Generated by CoffeeScript 1.4.0
(function() {
  var openvpnclass;

  openvpnclass = require('./openvpn');

  this.include = function() {
    var configpath, openvpn, vpnagent, vpnserverdata, vpnuserdata;
    openvpn = new openvpnclass;
    vpnserverdata = require('./openvpn').VpnServerData;
    vpnuserdata = require('./openvpn').VpnUserData;
    vpnagent = this.settings.agent;
    configpath = "/config/openvpn";
    /*  
    validateClientSchema = ->
        result = validate @body, vpnlib.clientSchema
        console.log result
        return @next new Error "Invalid openvpn client configuration posting!: #{result.errors}" unless result.valid
        @next()
    
    validateServerSchema = ->
        result = validate @body, vpnlib.serverSchema
        console.log result
        return @next new Error "Invalid openvpn server configuration posting!: #{result.errors}" unless result.valid
        @next()
    
    validateUser = ->
        result = validate @body, vpnlib.userSchema
        console.log result
        return @next new Error "Invalid openvpn user configuration posting!: #{result.errors}" unless result.valid
        @next()
    */

    this.post({
      '/openvpn/server': function() {
        var filename, instance,
          _this = this;
        openvpn["new"](new vpnserverdata(null, this.body));
        instance = openvpn["new"](this.body);
        filename = configpath + "/" + ("" + instance.id + ".conf");
        return openvpn.configvpn(instance, filename, openvpn.serverdb, function(res) {
          if (!(res instanceof Error)) {
            return _this.send(instance);
          } else {
            return next(new Error("Invalid openvpn server posting! " + res));
          }
        });
        /*
                instance = vpn.new @body
                filename = configpath + "/" + "#{instance.id}.conf"
                vpn.configvpn instance, filename, vpn.serverdb, (res) =>
                    unless res instanceof Error
                        @send instance
                    else
                        @next new Error "Invalid openvpn server posting! #{res}"
        */

      }
    });
    this.del({
      '/openvpn/server/:server': function() {
        var filename,
          _this = this;
        filename = configpath + "/" + ("" + this.params.server + ".conf");
        return openvpn.delInstance(this.params.server, vpn.serverdb, filename, function(res) {
          if (!(res instanceof Error)) {
            return _this.send(204);
          } else {
            return _this.next(res);
          }
        });
      }
    });
    this.post({
      '/openvpn/server/:server/users': function() {
        var ccdpath, entry, file, filename, res,
          _this = this;
        res = new vpnuserdata(null, this.body);
        if (res instanceof Error) {
          this.send(res);
        }
        file = this.body.email ? this.body.email : this.body.cname;
        entry = openvpn.getServerEntryByID(this.params.server);
        console.log(entry.config);
        if (!(entry instanceof Error)) {
          ccdpath = vpn.getCcdPath(entry);
          console.log('ccdpath is ' + ccdpath);
          filename = ccdpath + "/" + ("" + file);
          return openvpn.addUser(this.body, filename, function(res) {
            return _this.send(res);
          });
        } else {
          return this.next(entry);
        }
      }
    });
    this.del({
      '/openvpn/server/:id/users/:user': function() {
        var ccdpath, entry,
          _this = this;
        entry = openvpn.getServerEntryByID(this.params.id);
        if (!(entry instanceof Error)) {
          ccdpath = openvpn.getCcdPath(entry);
          return openvpn.delUser(this.params.user, ccdpath, function(res) {
            return _this.send(204);
          });
        } else {
          return this.next(entry);
        }
      }
    });
    this.get({
      '/openvpn/server/:id': function() {
        var entry, serverstatus, vpnmgmtport,
          _this = this;
        entry = openvpn.getServerEntryByID(this.params.id);
        if (!(entry instanceof Error)) {
          vpnmgmtport = openvpn.getMgmtPort(entry);
          serverstatus = openvpn.getStatusFile(entry);
          return openvpn.getInfo(vpnmgmtport, serverstatus, this.params.id, function(result) {
            return _this.send(result);
          });
        } else {
          return this.next(entry);
        }
      }
    });
    return this.get({
      '/openvpn/server': function() {
        var res;
        res = openvpn.listServers();
        return this.send(res);
      }
      /*
          #client endpoints are not used currently, we will convert it later
          @get '/openvpn/client': ->
              #get list of client instances from the DB
              res = vpn.listClients()
              @send res
      
          @post '/openvpn/client', validateClientSchema, ->
              instance = vpn.new @body
              filename = configpath + "/" + "#{instance.id}.conf"
              vpn.configvpn instance, filename, vpn.clientdb, (res) =>
                  unless res instanceof Error
                      @send instance
                  else
                      @next new Error "Invalid openvpn client posting! #{res}"
      
          @del '/openvpn/client/:client': ->
              filename = configpath + "/" + "#{@params.client}.conf"
              vpn.delInstance @params.client, vpn.clientdb, filename, (res) =>
                  unless res instanceof Error
                      @send 204
                  else
                      @next res
      */

    });
  };

}).call(this);
