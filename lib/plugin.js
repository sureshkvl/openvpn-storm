// Generated by CoffeeScript 1.7.1
(function() {
  var openvpn;

  openvpn = require('./openvpn');

  this.include = function() {
    var vpn;
    vpn = new openvpn(this.settings);
    this.post({
      '/openvpn/server': function() {
        return vpn.addserver(this.body, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(new Error("Invalid openvpn server posting! " + res));
            }
          };
        })(this));
      }
    });
    this.del({
      '/openvpn/server/:server': function() {
        return vpn.deleteserver(this.params.server, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(204);
            } else {
              return _this.next(new Error("Failed to delete openvpn server! " + res));
            }
          };
        })(this));
      }
    });
    this.post({
      '/openvpn/server/:server/users': function() {
        return vpn.adduser(this.params.server, this.body, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(new Error("Failed to add openvpn user! " + res));
            }
          };
        })(this));
      }
    });
    this.del({
      '/openvpn/server/:id/users/:user': function() {
        return vpn.deleteuser(this.params.id, this.params.user, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(204);
            } else {
              return _this.next(new Error("Failed to delete openvpn user ! " + res));
            }
          };
        })(this));
      }
    });
    this.get({
      '/openvpn/server/:id': function() {
        return vpn.getServerbyID(this.params.id, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(new Error("Failed to get openvpn server! " + res));
            }
          };
        })(this));
      }
    });
    return this.get({
      '/openvpn/server': function() {
        return vpn.listServers((function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(new Error("Failed to list openvpn servers! " + res));
            }
          };
        })(this));
      }
    });
  };

}).call(this);
