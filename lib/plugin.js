// Generated by CoffeeScript 1.8.0
(function() {
  var OpenvpnClientService, OpenvpnRegistry, OpenvpnServerService, OpenvpnUserRegistry, async;

  OpenvpnRegistry = require('./openvpn-registry').OpenvpnRegistry;

  OpenvpnUserRegistry = require('./openvpn-registry').OpenvpnUserRegistry;

  OpenvpnClientService = require('./openvpn-service').OpenvpnClient;

  OpenvpnServerService = require('./openvpn-service').OpenvpnServer;

  async = require('async');

  this.include = function() {
    var agent, clientRegistry, fs, plugindir, serverRegistry, userRegistry;
    agent = this.settings.agent;
    if (agent == null) {
      throw new Error("this plugin requires to be running in the context of a valid StormAgent!");
    }
    plugindir = this.settings.plugindir;
    if (plugindir == null) {
      plugindir = "/var/stormflash/plugins/openvpn";
    }
    fs = require('fs');
    if (!fs.existsSync(plugindir)) {
      fs.mkdirSync(plugindir);
    }
    clientRegistry = new OpenvpnRegistry("client", plugindir + "/openvpn-clients.db");
    serverRegistry = new OpenvpnRegistry("server", plugindir + "/openvpn-servers.db");
    userRegistry = new OpenvpnUserRegistry(plugindir + "/openvpn-users.db");
    serverRegistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof OpenvpnServerService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: openvpn " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: openvpn " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: openvpn " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });
    clientRegistry.on('ready', function() {
      var service, _i, _len, _ref, _results;
      _ref = this.list();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        service = _ref[_i];
        if (!(service instanceof OpenvpnClientService)) {
          continue;
        }
        agent.log("restore: trying to recover:", service);
        _results.push((function(service) {
          return service.generate(function(err) {
            if (err != null) {
              return agent.log("restore: openvpn " + service.id + " failed to generate configs!");
            }
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return agent.log("restore: openvpn " + service.id + " invoke failed with:", err);
              } else {
                return agent.log("restore: openvpn " + service.id + " invoke succeeded wtih " + instance);
              }
            });
          });
        })(service));
      }
      return _results;
    });
    this.post({
      '/openvpn/server': function() {
        var err, service;
        try {
          service = new OpenvpnServerService(null, this.body, {});
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        return service.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /openvpn/server generation results:", results);
            serverRegistry.add(service);
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: service.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
    this.del({
      '/openvpn/server/:server': function() {
        var service;
        service = serverRegistry.get(this.params.server);
        if (service == null) {
          return this.send(404);
        }
        serverRegistry.remove(this.params.server);
        return this.send(204);
      }
    });
    this.put({
      '/openvpn/server/:server': function() {
        var service;
        service = serverRegistry.get(this.params.server);
        if (service == null) {
          return this.send(404);
        }
        return service.updateService(this.body, (function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("update :", results);
            return _this.send({
              updated: true
            });
          };
        })(this));
      }
    });
    this.post({
      '/openvpn/server/:server/users': function() {
        var server, serverId, tasks, user, users, _fn, _i, _len;
        serverId = this.params.server;
        users = this.body;
        server = serverRegistry.get(serverId);
        if (!((serverId != null) && (users != null) && (server != null))) {
          return this.send(400);
        }
        if (!(users instanceof Array)) {
          users = [users];
        }
        tasks = {};
        _fn = function(user) {
          return tasks[user.id] = function(callback) {
            var entry;
            user.ccdpath = server.data["client-config-dir"];
            entry = userRegistry.add(user.id, user);
            userRegistry.adduser(entry);
            return callback(null, entry);
          };
        };
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user = users[_i];
          _fn(user);
        }
        return async.parallel(tasks, (function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            return _this.send(results);
          };
        })(this));
      }
    });
    this.del({
      '/openvpn/server/:id/users/:user': function() {
        var entry, server, serverId, ulist, user, userId, _i, _len;
        serverId = this.params.id;
        userId = this.params.user;
        ulist = userRegistry.list();
        server = serverRegistry.get(serverId);
        if (ulist) {
          for (_i = 0, _len = ulist.length; _i < _len; _i++) {
            entry = ulist[_i];
            if (entry && entry.cname === userId) {
              user = entry;
            }
          }
        }
        if (!((serverId != null) && (user != null) && (server != null))) {
          return this.send(400);
        }
        return userRegistry.deleteuser(server.data, user, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              userRegistry.remove(user.id);
              return _this.send({
                deleted: true
              });
            } else {
              return _this.next(new Error("Failed to delete openvpn user ! " + user.id));
            }
          };
        })(this));
      }
    });
    this.get({
      '/openvpn/server/:id': function() {
        var service;
        service = serverRegistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        } else {
          return this.send(service.data);
        }
      }
    });
    this.get({
      '/openvpn/server': function() {
        return this.send(serverRegistry.list());
      }
    });
    this.post({
      '/openvpn/client': function() {
        var err, service;
        try {
          service = new OpenvpnClientService(null, this.body, {});
        } catch (_error) {
          err = _error;
          return this.next(err);
        }
        return service.generate((function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("POST /openvpn/client generation results:", results);
            clientRegistry.add(service);
            return agent.invoke(service, function(err, instance) {
              if (err != null) {
                return _this.next(err);
              } else {
                return _this.send({
                  id: service.id,
                  running: true
                });
              }
            });
          };
        })(this));
      }
    });
    this.del({
      '/openvpn/client/:client': function() {
        var service;
        service = clientRegistry.get(this.params.client);
        if (service == null) {
          return this.send(404);
        }
        clientRegistry.remove(this.params.client);
        return this.send(204);
      }
    });
    this.put({
      '/openvpn/client/:client': function() {
        var service;
        service = clientRegistry.get(this.params.client);
        if (service == null) {
          return this.send(404);
        }
        return service.updateService(this.body, (function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            agent.log("update :", results);
            return _this.send({
              updated: true
            });
          };
        })(this));
      }
    });
    this.get({
      '/openvpn/client/:id': function() {
        var service;
        service = clientRegistry.get(this.params.id);
        if (service == null) {
          return this.send(404);
        } else {
          return this.send(service.data);
        }
      }
    });
    return this.get({
      '/openvpn/client': function() {
        return this.send(clientRegistry.list());
      }
    });
  };

}).call(this);
