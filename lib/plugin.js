// Generated by CoffeeScript 1.7.1
(function() {
  var async, openvpn;

  openvpn = require('./openvpn');

  async = require('async');

  this.include = function() {
    var vpn;
    vpn = new openvpn(this.settings);
    this.post({
      '/openvpn/server': function() {
        return vpn.addserver(this.body, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(new Error("Invalid openvpn server posting! " + res));
            }
          };
        })(this));
      }
    });
    this.del({
      '/openvpn/server/:server': function() {
        return vpn.deleteserver(this.params.server, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(204);
            } else {
              return _this.next(new Error("Failed to delete openvpn server! " + res));
            }
          };
        })(this));
      }
    });
    this.post({
      '/openvpn/server/:server/users': function() {
        var serverId, tasks, user, users, _fn, _i, _len;
        serverId = this.params.server;
        users = this.body;
        if (!((serverId != null) && (users != null))) {
          return this.send(400);
        }
        if (!(users instanceof Array)) {
          users = [users];
        }
        tasks = {};
        _fn = function(user) {
          return tasks[user.id] = function(callback) {
            return vpn.adduser(serverId, user, function(res) {
              if (!(res instanceof Error)) {
                return callback(null, res);
              } else {
                return callback("Failed to add openvpn user! " + res);
              }
            });
          };
        };
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          user = users[_i];
          _fn(user);
        }
        return async.parallel(tasks, (function(_this) {
          return function(err, results) {
            if (err != null) {
              return _this.next(err);
            }
            return _this.send(results);
          };
        })(this));
      }
    });
    this.del({
      '/openvpn/server/:id/users/:user': function() {
        return vpn.deleteuser(this.params.id, this.params.user, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(204);
            } else {
              return _this.next(new Error("Failed to delete openvpn user ! " + res));
            }
          };
        })(this));
      }
    });
    this.get({
      '/openvpn/server/:id': function() {
        return vpn.getServerbyID(this.params.id, (function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(new Error("Failed to get openvpn server! " + res));
            }
          };
        })(this));
      }
    });
    return this.get({
      '/openvpn/server': function() {
        return vpn.listServers((function(_this) {
          return function(res) {
            if (!(res instanceof Error)) {
              return _this.send(res);
            } else {
              return _this.next(new Error("Failed to list openvpn servers! " + res));
            }
          };
        })(this));
      }
    });
  };

}).call(this);
